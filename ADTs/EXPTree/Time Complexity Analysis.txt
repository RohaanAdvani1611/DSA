Time Complexity Analysis:

1. Init Tree:

Function:

void initTree(ET *t, char *str){
    
    int i = 0;  //[A]
    node *p1, *p2;
    node q;
    //No: of open brackets
    int brac = 0;
    
    if (!*t)
        *t = NULL;
    nstack noStack;
    cstack opStack;
    ninit(&noStack, 50);
    cinit(&opStack, 50);  //[B]
    
    while (str[i] != '\0'){     //[C]
        if (cisEmpty(opStack)){
            if (str[i] == '(')
                brac++;
            cpush(&opStack, str[i]);            
        }

        else if (str[i] == '('){
            brac++;
            cpush(&opStack, str[i]);
        }
        
        else if (isdigit(str[i])){
            int num = 0;
            while (isdigit(str[i])){
                num  = 10 * num + (int)(str[i] - '0');
                i++;
            }
            npush(&noStack, create_intnode(num));
            i -= 1;
        }
        
        else if (str[i] == ')'){
            brac--;
            while (cpeek(opStack) != '('){
                char curr = cpop(&opStack);

                p1 = npeek(noStack);
                npop(&noStack);
                p2 = npeek(noStack);
                npop(&noStack);
                
                q = create_charnode(curr);
                q.right = p1;
                q.left = p2;
                npush(&noStack, q);
            }
            cpop(&opStack);
        }
        //Take care of unnecessary spaces in expression
        else if (str[i] == ' '){
            i++;
            continue;
        }
        
        else if (!cisEmpty(opStack) && precendence(str[i]) < precendence(cpeek(opStack)) && precendence(str[i]) != -1){
            while (precendence(str[i]) < precendence(cpeek(opStack))){   
                char curr = cpop(&opStack);
                
                p1 = npeek(noStack);
                npop(&noStack);
                p2 = npeek(noStack);
                npop(&noStack);
                    
                q = create_charnode(curr);
                q.right = p1;
                q.left = p2;
                npush(&noStack, q);
            }
            cpush(&opStack, str[i]);
        }
        
        else{
            if (precendence(str[i]) == -1){
                printf("Invalid Input");
                *t = NULL;
                return;
            }
             cpush(&opStack , str[i]);
        }  
        i++; 
    }  //[D]
    
    //If open brackets var is not 0 at end, all brackets haven't been closed
    if (brac){  //[E]
        printf("Invalid Expression");
        *t = NULL;
        return;
    }
    *t = npeek(noStack);
    npop(&noStack);   //[F]
}

Time Complexity Analysis:
(Note: Lines are marked in comments)
Line [A] to Line [B] - Simple Expressions Thus TC = O(1)
Line [C] to Line [D]- Loop Thus TC = O(n*1) = O(n)
Line [E] to Line [F] - Simple Expressions Thus TC = O(1)

Total TC = O(1) + O(n) + O(1) = O(n)

2. Traverse:

Function:

void Traverse(ET t){
    if (!t)
        return ;
    Traverse(t->left);
    //Since operands are leaves in expression tree 
    if (!t->left && !t->right){
        printf("%d ", t->key.digit);
    }
    else{
        printf("%c ", t->key.oper);
    }
    Traverse(t->right);
    return;
}

Time Complexity Analysis: Since each node is visited only once, assuming we have n nodes Total TC = O(n)

3. Compute :

Function:

node *compute(ET t, node *root){
    if (!t)
        return NULL;
    if (!t->left && !t->right)
        return t;
    t->left = compute(t->left, root);
    t->right = compute(t->right, root);

    Traverse(root);
    printf("\n");
    node *ans = (node*)malloc(sizeof(node));
    ans->left = ans->right = NULL;

    int p;

    switch(t->key.oper){
        case '+':
            p = t->left->key.digit + t->right->key.oper;
            break;
        case '-':
            p = t->left->key.digit - t->right->key.oper;
            break;
        case '/':
            p = t->left->key.digit / t->right->key.oper;
            break;
        case '*':
            p = t->left->key.digit * t->right->key.oper;
            break;
    }
    ans->key.digit = p;
    return ans;
}

Time Complexity Analysis: Time taken for each operation is constant O(1) * into no: of operations. No: of operation = No: of internal nodes / operators = n
Thus Total TC = O(n*1) = O(n)
